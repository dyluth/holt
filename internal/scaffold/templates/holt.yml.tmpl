version: '1.0'

# Defines the clan of agents available to the orchestrator
agents:
  # Example agent demonstrating the basic structure
  example-agent:
    # The agent's functional role for claim routing
    # Multiple agents can share the same role
    role: 'example'

    # Docker build context
    build:
      context: './agents/example-agent'

    # The command the pup will execute for this agent
    command: ["/usr/bin/run.sh"]

    # Workspace mode: 'ro' for read-only, 'rw' for read-write
    workspace:
      mode: 'rw'

    # Advanced features (uncomment to enable):

    # Parallel execution - run multiple instances simultaneously
    # Requires strategy: 'fresh_per_call'
    # replicas: 3

    # Container lifecycle strategy
    # 'reuse' (default) - container started once and left running
    # 'fresh_per_call' - new container for every granted claim
    # Must be 'fresh_per_call' if replicas > 1
    # strategy: 'fresh_per_call'

    # Environment variables injected into the container
    # environment:
    #   - GITHUB_TOKEN        # Injects from host environment
    #   - LOG_LEVEL=debug     # Sets specific value

    # Resource constraints (mirrors docker-compose syntax)
    # resources:
    #   limits:
    #     cpus: '0.50'
    #     memory: 512M
    #   reservations:
    #     cpus: '0.25'
    #     memory: 256M

    # LLM prompts (for LLM-driven agents)
    # prompts:
    #   claim: |
    #     You are a helpful assistant evaluating claims...
    #   execution: |
    #     You are a helpful assistant executing work...

# Optional: Overrides for core infrastructure services
# services:
#   orchestrator:
#     image: 'holt/orchestrator:v0.1.0'
#   redis:
#     image: 'redis:7-alpine'
