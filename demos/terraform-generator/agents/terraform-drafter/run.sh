#!/bin/sh
# TerraformDrafter agent - Generates Terraform code from user goal
# MOCKED VERSION: Uses hardcoded main.tf content for deterministic testing

set -e

input=$(cat)
cd /workspace

# Configure git user for commits
git config user.email "terraformdrafter@holt.demo"
git config user.name "Holt TerraformDrafter"

# Extract goal from input
goal=$(echo "$input" | jq -r '.target_artefact.payload')

echo "TerraformDrafter: Received goal: $goal" >&2
echo "TerraformDrafter: Generating Terraform code (MOCKED)..." >&2

# MOCKED LLM RESPONSE: Hardcoded Terraform code for S3 static website hosting
# In production, this would call OpenAI API with the goal as prompt
cat > main.tf <<'EOF'
# Terraform module for S3 static website hosting
# Generated by Holt TerraformDrafter

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

variable "bucket_name" {
  description = "Name of the S3 bucket for static website hosting"
  type        = string
}

variable "index_document" {
  description = "Index document for the website"
  type        = string
  default     = "index.html"
}

variable "error_document" {
  description = "Error document for the website"
  type        = string
  default     = "error.html"
}

resource "aws_s3_bucket" "website" {
  bucket = var.bucket_name

  tags = {
    Name        = var.bucket_name
    Environment = "demo"
    ManagedBy   = "Terraform"
  }
}

resource "aws_s3_bucket_website_configuration" "website" {
  bucket = aws_s3_bucket.website.id

  index_document {
    suffix = var.index_document
  }

  error_document {
    key = var.error_document
  }
}

resource "aws_s3_bucket_public_access_block" "website" {
  bucket = aws_s3_bucket.website.id

  block_public_acls       = false
  block_public_policy     = false
  ignore_public_acls      = false
  restrict_public_buckets = false
}

resource "aws_s3_bucket_policy" "website" {
  bucket = aws_s3_bucket.website.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid       = "PublicReadGetObject"
        Effect    = "Allow"
        Principal = "*"
        Action    = "s3:GetObject"
        Resource  = "${aws_s3_bucket.website.arn}/*"
      }
    ]
  })

  depends_on = [aws_s3_bucket_public_access_block.website]
}

output "website_endpoint" {
  description = "Website endpoint URL"
  value       = aws_s3_bucket_website_configuration.website.website_endpoint
}

output "bucket_name" {
  description = "Name of the S3 bucket"
  value       = aws_s3_bucket.website.id
}

output "bucket_arn" {
  description = "ARN of the S3 bucket"
  value       = aws_s3_bucket.website.arn
}
EOF

# Commit the generated code
git add main.tf
git commit -m "[holt-agent: TerraformDrafter] Generated Terraform code for S3 static website hosting

Goal: $goal"

commit_hash=$(git rev-parse HEAD)

echo "TerraformDrafter: Committed Terraform code as $commit_hash" >&2

# Output CodeCommit artefact with type "TerraformCode"
cat <<EOF
{
  "artefact_type": "TerraformCode",
  "artefact_payload": "$commit_hash",
  "summary": "Generated Terraform module for S3 static website hosting"
}
EOF
