# Example sett.yml with M3.4 Controller-Worker Pattern
# This demonstrates horizontal scaling with controller-worker architecture

version: "1.0"

orchestrator:
  max_review_iterations: 3

agents:
  # Traditional agent (no scaling, single container)
  reviewer-agent:
    role: "Reviewer"
    image: "reviewer:latest"
    command: ["./review.sh"]
    bidding_strategy: "review"
    workspace:
      mode: ro

  # Controller-worker pattern agent (scalable)
  coder-controller:
    role: "Coder"
    mode: "controller"  # This container only bids, never executes
    image: "coder:latest"
    command: ["/app/cub"]  # Controller runs cub in bidder-only mode
    bidding_strategy: "exclusive"

    # Worker configuration for ephemeral execution containers
    worker:
      image: "coder:latest"  # Can differ from controller image
      max_concurrent: 3      # Maximum parallel workers (default: 1)
      command: ["/app/cub"]  # Worker command (launched with --execute-claim flag)
      workspace:
        mode: rw  # Workers need write access for code changes

  # Another scalable agent with different concurrency limit
  tester-controller:
    role: "Tester"
    mode: "controller"
    image: "tester:latest"
    command: ["/app/cub"]
    bidding_strategy: "claim"

    worker:
      image: "tester:latest"
      max_concurrent: 5  # More parallel testers allowed
      command: ["/app/cub"]
      workspace:
        mode: ro  # Tests only read code

services:
  redis:
    image: redis:7-alpine
  orchestrator:
    image: sett-orchestrator:latest
